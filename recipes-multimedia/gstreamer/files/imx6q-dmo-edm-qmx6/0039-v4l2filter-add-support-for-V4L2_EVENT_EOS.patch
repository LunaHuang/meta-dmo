From b555289388856fb8f7a3bc97a54c1079199e6a1b Mon Sep 17 00:00:00 2001
From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Mon, 18 Feb 2013 17:53:43 +0100
Subject: [PATCH 39/40] v4l2filter: add support for V4L2_EVENT_EOS

Stop the EOS event from propagating downstream immediately.
Instead, do a STREAMOFF on the v4l2 output side (sink object)
and watch the v4l2 capture side fd for the EOS event before
sending it on.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 sys/v4l2/gstv4l2bufferpool.c |  5 ++++
 sys/v4l2/gstv4l2filter.c     | 61 ++++++++++++++++++++++++++++++++++++++++++++
 sys/v4l2/gstv4l2filter.h     |  2 ++
 3 files changed, 68 insertions(+)

diff --git a/sys/v4l2/gstv4l2bufferpool.c b/sys/v4l2/gstv4l2bufferpool.c
index e739909..8cb0e72 100644
--- a/sys/v4l2/gstv4l2bufferpool.c
+++ b/sys/v4l2/gstv4l2bufferpool.c
@@ -317,13 +317,18 @@ wrong_config:
 static gboolean
 start_streaming (GstV4l2BufferPool * pool)
 {
+  struct v4l2_event_subscription sub;
   GstV4l2Object *obj = pool->obj;
 
+  memset(&sub, 0, sizeof sub);
+  sub.type = V4L2_EVENT_EOS;
+
   switch (obj->mode) {
     case GST_V4L2_IO_RW:
       break;
     case GST_V4L2_IO_MMAP:
     case GST_V4L2_IO_USERPTR:
+      v4l2_ioctl (pool->video_fd, VIDIOC_SUBSCRIBE_EVENT, &sub);
       GST_DEBUG_OBJECT (pool, "STREAMON");
       if (v4l2_ioctl (pool->video_fd, VIDIOC_STREAMON, &obj->type) < 0)
         goto start_failed;
diff --git a/sys/v4l2/gstv4l2filter.c b/sys/v4l2/gstv4l2filter.c
index 177458f..e0f585a 100644
--- a/sys/v4l2/gstv4l2filter.c
+++ b/sys/v4l2/gstv4l2filter.c
@@ -464,6 +464,7 @@ gst_v4l2filter_sink_setcaps (GstPad * pad, GstCaps * caps)
 static gboolean
 gst_v4l2filter_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
 {
+  GstV4l2Filter *v4l2filter = GST_V4L2FILTER (GST_OBJECT_PARENT (pad));
   gboolean ret;
 
   switch (GST_EVENT_TYPE (event)) {
@@ -476,6 +477,21 @@ gst_v4l2filter_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
       gst_event_unref (event);
       break;
     }
+    case GST_EVENT_EOS:
+      if (!v4l2filter->eos) {
+        /*
+         * Send VIDIOC_STREAMOFF on the v4l2 output side and continue to dequeue
+         * remaining buffers at the v4l2 capture side.
+         */
+        GST_LOG_OBJECT (v4l2filter, "got EOS event, stopping sink\n");
+        gst_v4l2_object_stop (v4l2filter->sink_v4l2object);
+
+        gst_event_unref (event);
+        ret = TRUE;
+        break;
+      }
+      GST_WARNING_OBJECT (v4l2filter, "got EOS event again, propagating\n");
+      /* else: fallthrough */
     default:
       ret = gst_pad_event_default (pad, parent, event);
       break;
@@ -530,6 +546,31 @@ gst_v4l2filter_src_event (GstPad * pad, GstObject * parent, GstEvent * event)
   return ret;
 }
 
+static gboolean
+gst_v4l2filter_v4l2_event (GIOChannel * source, GIOCondition condition, gpointer data)
+{
+  GstV4l2Filter *v4l2filter = GST_V4L2FILTER (data);
+  struct v4l2_event v4l2_event;
+
+  if (v4l2_ioctl (v4l2filter->src_v4l2object->video_fd, VIDIOC_DQEVENT, &v4l2_event) < 0) {
+    GST_DEBUG_OBJECT (v4l2filter, "failed to dequeue v4l2 event\n");
+    return FALSE;
+  }
+
+  switch (v4l2_event.type) {
+  case V4L2_EVENT_EOS:
+    GST_DEBUG_OBJECT (v4l2filter, "v4l2 event: EOS\n");
+    v4l2filter->eos = TRUE;
+    gst_pad_send_event (v4l2filter->sinkpad, gst_event_new_eos ());
+    break;
+  default:
+    GST_LOG_OBJECT (v4l2filter, "ignored v4l2 event\n");
+    break;
+  }
+
+  return TRUE;
+}
+
 static GstStateChangeReturn
 gst_v4l2filter_change_state (GstElement * element, GstStateChange transition)
 {
@@ -546,6 +587,8 @@ gst_v4l2filter_change_state (GstElement * element, GstStateChange transition)
         GST_V4L2FILTER_PREROLL_UNLOCK (v4l2filter);
         return GST_STATE_CHANGE_FAILURE;
       }
+      v4l2filter->event_channel = g_io_channel_unix_new (v4l2filter->src_v4l2object->video_fd);
+      g_io_add_watch (v4l2filter->event_channel, G_IO_PRI, gst_v4l2filter_v4l2_event, v4l2filter);
       break;
     default:
       break;
@@ -564,6 +607,9 @@ gst_v4l2filter_change_state (GstElement * element, GstStateChange transition)
       gst_v4l2_object_stop (v4l2filter->src_v4l2object);
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
+      g_io_channel_unref (v4l2filter->event_channel);
+      v4l2filter->event_channel = NULL;
+
       /* close the device */
       gst_v4l2_object_close (v4l2filter->sink_v4l2object);
       gst_v4l2_object_close (v4l2filter->src_v4l2object);
@@ -588,6 +634,16 @@ v4l2_filter_src_task (GstPad * pad)
   GstV4l2Object *obj = v4l2filter->src_v4l2object;
   GstV4l2FilterTime *time;
 
+  if (G_UNLIKELY (v4l2filter->eos)) {
+    GST_WARNING_OBJECT (GST_OBJECT (v4l2filter), "src_task tries to push buffer with EOS set\n");
+    /*
+     * We have to bail out here if EOS is set, otherwise the gst_pad_push below
+     * will lock against the gst_pad_send_event called from
+     * gst_v4l2filter_v4l2_event.
+     */
+    goto out;
+  }
+
   ret = gst_buffer_pool_acquire_buffer (obj->pool, &buffer, NULL);
   if (G_UNLIKELY (ret != GST_FLOW_OK))
     goto out;
@@ -698,6 +754,11 @@ gst_v4l2filter_sink_chain (GstPad * pad, GstObject * parent, GstBuffer * buffer)
     return GST_FLOW_FLUSHING;
   }
 
+  if (G_UNLIKELY (v4l2filter->eos)) {
+    GST_WARNING_OBJECT (GST_OBJECT (v4l2filter), "sink_chain called with EOS set\n");
+    return GST_FLOW_EOS;
+  }
+
   time = g_slice_new (GstV4l2FilterTime);
   time->pts = GST_BUFFER_PTS (buffer);
   time->dts = GST_BUFFER_DTS (buffer);
diff --git a/sys/v4l2/gstv4l2filter.h b/sys/v4l2/gstv4l2filter.h
index fd24e01..4ef843f 100644
--- a/sys/v4l2/gstv4l2filter.h
+++ b/sys/v4l2/gstv4l2filter.h
@@ -72,6 +72,8 @@ struct _GstV4l2Filter {
 
   GSequence *queue;
   GMutex queue_lock;
+  GIOChannel *event_channel;
+  gboolean eos;
 };
 
 struct _GstV4l2FilterClass {
-- 
1.8.3

